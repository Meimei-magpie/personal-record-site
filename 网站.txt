#项目结构#
/personal-record-site
    /backend
        server.js
    /frontend
        /src
            /components
                Editor.js
                ImageUploader.js
                WorldMap.js
                UserProfile.js
            App.js
            index.js
    package.json
#创建REACT项目#
npx create-react-app frontend
cd frontend
npm install react-quill leaflet react-leaflet react-filepond filepond

#APP.JS#
import React, { useState, useEffect } from 'react';
import WorldMap from './components/WorldMap';
import UserProfile from './components/UserProfile';
import Editor from './components/Editor';
import ImageUploader from './components/ImageUploader';
import Login from './components/Login'; // 引入 Login 组件

function App() {
  const [isAuthenticated, setIsAuthenticated] = useState(false);

  // 检查用户是否已登录
  useEffect(() => {
    const token = localStorage.getItem('token');
    if (token) {
      setIsAuthenticated(true);
    } else {
      setIsAuthenticated(false);
    }
  }, []);

  // 登录状态改变时更新状态
  const handleLoginStatus = (status) => {
    setIsAuthenticated(status);
  };

  return (
    <div style={{ display: 'flex', flexDirection: 'column', height: '100vh' }}>
      {/* 世界地图和个人简介对所有人开放 */}
      <WorldMap />
      <div style={{ position: 'absolute', top: '20px', left: '20px', color: 'white' }}>
        <h1>个人记录宏观信息</h1>
      </div>
      <div style={{ position: 'absolute', top: '100px', left: '20px', color: 'white' }}>
        <h2>个人介绍</h2>
        <UserProfile />
      </div>

      {/* 如果用户已登录，显示编辑和上传功能，否则显示登录组件 */}
      {isAuthenticated ? (
        <>
          <div style={{ position: 'absolute', top: '300px', left: '20px', color: 'white' }}>
            <h2>宏观解读</h2>
            <Editor />
          </div>
          <div style={{ position: 'absolute', top: '500px', left: '20px', color: 'white' }}>
            <h2>上传图片</h2>
            <ImageUploader />
          </div>
        </>
      ) : (
        <div style={{ position: 'absolute', top: '300px', left: '20px', color: 'white' }}>
          <h2>请登录以编辑和上传内容</h2>
          <Login onLogin={handleLoginStatus} />
        </div>
      )}
    </div>
  );
}

export default App;

#世界地图背景#
import React from 'react';
import { MapContainer, TileLayer } from 'react-leaflet';
import 'leaflet/dist/leaflet.css';

function WorldMap() {
  return (
    <MapContainer center={[0, 0]} zoom={2} style={{ position: 'absolute', top: 0, left: 0, width: '100%', height: '100vh', zIndex: -1 }}>
      <TileLayer url="https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png" />
    </MapContainer>
  );
}
export default WorldMap;
#展示个人信息#
import React, { useState } from 'react';

function UserProfile() {
  const [intro, setIntro] = useState('作者希望在这里记录对全球宏观变动的观察');

  const handleChange = (e) => {
    setIntro(e.target.value);
  };

  return (
    <div>
      <textarea
        value={intro}
        onChange={handleChange}
        rows="4"
        cols="50"
        style={{ width: '300px' }}
      />
    </div>
  );
}

export default UserProfile;
#宏观解读的富文本功能#
import React, { useState } from 'react';
import ReactQuill from 'react-quill';
import 'react-quill/dist/quill.snow.css';

function Editor() {
  const [content, setContent] = useState('');

  const handleChange = (value) => {
    setContent(value);
  };

  return (
    <div>
      <ReactQuill value={content} onChange={handleChange} />
    </div>
  );
}

export default Editor;
#图片上传功能#
import React, { useState } from 'react';
import { FilePond } from 'react-filepond';
import 'filepond/dist/filepond.min.css';

function ImageUploader() {
  const [files, setFiles] = useState([]);
  
  const API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000';
  console.log('当前API地址:', API_URL);

  const handleUpdateFiles = (fileItems) => {
    setFiles(fileItems.map(fileItem => fileItem.file));
  };
const serverConfig = {
    process: {
      url: `${API_URL}/upload`,
      method: 'POST',
      withCredentials: false
    }
  };
  
  console.log('FilePond 服务器配置:', serverConfig);
  console.log('完整上传URL:', serverConfig.process.url);


  return (
    <div>
      <FilePond
        files={files}
        onupdatefiles={handleUpdateFiles}
        server={{
          process: {
            url: `${API_URL}/upload`,
            method: 'POST',
            withCredentials: false
          }
        }}
        name="image"
        labelIdle='拖放文件或 <span class="filepond--label-action">浏览</span>'
      />
    </div>
  );
}

export default ImageUploader;

#后端代码#
#在 backend 文件夹中，初始化一个新的 Node.js 项目#
mkdir backend
cd backend
npm init -y
npm install express multer
#serve.js#
const express = require('express');
const multer = require('multer');
const cors = require('cors');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const app = express();

// ✅ 使用环境变量，如果找不到就用默认值
const PORT = process.env.PORT || 5000;
const JWT_SECRET = 'your-secret-key';  // 用更强的密钥替换这个

// ✅ 配置CORS，允许前端访问
app.use(cors({
  origin: process.env.FRONTEND_URL || 'http://localhost:3000',
  credentials: true
}));

// ✅ 解析 JSON 请求体
app.use(express.json());

// 模拟的用户数据（实际项目中可以从数据库获取）
const users = [
  {
    username: 'admin',
    password: '$2a$10$kPqH02Um94fKbBhZ0YzVOi8q0ro/ogZ2Dpxs46cGpWeKgRWi0UwmS'  // 这是加密后的 "password123"
  }
];

// ✅ 使用内存存储（避免云平台文件丢失问题）
const storage = multer.memoryStorage();
const upload = multer({
  storage,
  limits: {
    fileSize: 5 * 1024 * 1024 // 限制5MB
  }
});

// ✅ JWT 验证中间件
const authenticateToken = (req, res, next) => {
  const token = req.headers['authorization']?.split(' ')[1];  // 从 Authorization 头中提取 token

  if (!token) {
    return res.status(403).json({ message: '缺少 token，访问被拒绝' });
  }

  jwt.verify(token, JWT_SECRET, (err, user) => {
    if (err) {
      return res.status(403).json({ message: '无效的 token，访问被拒绝' });
    }
    req.user = user;  // 将用户信息附加到请求对象
    next();  // 继续执行后续的路由处理
  });
};

// ✅ 用户登录接口 (生成 JWT token)
app.post('/login', (req, res) => {
  const { username, password } = req.body;

  // 查找用户
  const user = users.find(u => u.username === username);
  if (!user) {
    return res.status(400).json({ message: '用户不存在' });
  }

  // 比对密码
  bcrypt.compare(password, user.password, (err, isMatch) => {
    if (err) {
      return res.status(500).json({ message: '密码验证失败' });
    }

    if (!isMatch) {
      return res.status(400).json({ message: '密码错误' });
    }

    // 密码匹配成功，生成 JWT token
    const token = jwt.sign({ username: user.username }, JWT_SECRET, { expiresIn: '1h' });
    
    res.json({ token });  // 返回生成的 token
  });
});

// ✅ 保护的文件上传接口
app.post('/upload', authenticateToken, upload.single('image'), (req, res) => {
  if (!req.file) {
    return res.status(400).send('No file uploaded.');
  }
  res.json({
    fileUrl: 'https://via.placeholder.com/300',
    message: '文件上传请求已收到（实际存储功能待实现）',
    filename: req.file.originalname,
    size: req.file.size
  });
});

// ✅ 健康检查接口（重要！）
app.get('/health', (req, res) => {
  res.json({
    status: 'OK',
    message: '后端服务运行正常',
    timestamp: new Date().toISOString(),
    environment: process.env.NODE_ENV || 'development'
  });
});

// ✅ 根路径也返回健康信息
app.get('/', (req, res) => {
  res.json({
    message: '个人记录网站后端服务',
    version: '1.0.0',
    endpoints: {
      health: '/health',
      upload: '/upload',
      login: '/login'
    }
  });
});

// ✅ 使用环境变量中的端口
app.listen(PORT, () => {
  console.log(`服务器运行在端口 ${PORT}`);
  console.log(`健康检查: http://localhost:${PORT}/health`);
  console.log(`前端域名: ${process.env.FRONTEND_URL || 'http://localhost:3000'}`);
})；
#创建上传文件夹#
mkdir uploads

#连接前后端#
#安装cors#
npm install cors
#在serve.js中添加cors配置#
const cors = require('cors');
app.use(cors());
#启用后端服务器#
node backend/server.js
#启用前端react应用!!必须在package.json根目录下运行#
npm start
#访问#
http://localhost:3000
